@page "/category/list"
@using MySql.Data.MySqlClient
@using phaminhcongBlazorServer.Data
@inject NavigationManager NavigationManager
<h3>Brand</h3>
<PageTitle>List of Brand</PageTitle>

    <Button Type="ButtonType.Link" Color="ButtonColor.Success" class="me-1" To="category/create">+ Thêm nhãn hàng</Button>

@* //code giao dien *@
<Grid TItem="Category"
      Class="table table-hover table-bordered table-striped"
      DataProvider="CategoryDataProvider"
      AllowPaging="true"
      PageSize="5"
      >

    <GridColumn TItem="Category" HeaderText="Id" PropertyName="CatId" SortKeySelector="item => item.CatId">
        @context.CatId
    </GridColumn>
    <GridColumn TItem="Category" HeaderText="Employee Name" PropertyName="CatName" SortKeySelector="item => item.CatName">
        @context.CatName
    </GridColumn>
    <GridColumn TItem="Category" HeaderText="Status" PropertyName="IsDeleted" SortKeySelector="item => item. IsDeleted">
        @if (@context.IsDeleted == 1)
        {
            <span class="badge text-bg-danger">Deleted</span>
        }
        else
        {
            <span class="badge text-bg-success">Active</span>
        }
</GridColumn>

    <GridColumn TItem="Category" HeaderText="Action">
        <Button Type="ButtonType.Link" Color="ButtonColor.Warning" class="me-1" To=@($"category/edit/{@context.CatId}")>Edit</Button>
        <Button Type="ButtonType.Button" Color="ButtonColor.Danger" @onclick=" (CatId) => DeleteCategory(context.CatId)">Deleted</Button>
    </GridColumn>

</Grid>
@code {
    //code logic
    public List<Category> listCategory = null;
    private async Task<GridDataProviderResult<Category>> CategoryDataProvider(GridDataProviderRequest<Category> request)
    {
        if (listCategory is null) // pull employees only one time for client-side filtering, sorting, and paging
            listCategory = GetCategories(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(listCategory));
    }

    protected override void OnInitialized()
    {
        listCategory = GetCategories();
    }
    public List<Category> GetCategories()
    {
        List<Category> list = new List<Category>();
        try
        {
            string SqlGetCategories = "SELECT * FROM categories ORDER BY cat_id";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlGetCategories;
            MySqlDataReader mySqlDataReader = cmd.ExecuteReader();
            while (mySqlDataReader.Read())
            {
                int CatId = mySqlDataReader.GetInt32("cat_id");
                string CatName = mySqlDataReader.GetString("cat_name");
                int IsDeleted = mySqlDataReader.GetInt32("isDeleted");
                Category c = new Category(CatId, CatName, IsDeleted);
                list.Add(c);
            }
            conn.Close();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return list;
    }
    private void DeleteCategory(int id)
    {
        try
        {
            string SqlUpdateCategory = $"UPDATE categories SET isDeleted = 1 WHERE cat_id = {id}";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlUpdateCategory;
            cmd.ExecuteNonQuery();
            conn.Close();
            NavigationManager.NavigateTo("/category/list",true);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
<script>
    function xoa() {
        return confirm("Bạn có muốn xóa?");
    }
</script>