@page "/user/create"
@using phaminhcongBlazorServer.Data
@using MySql.Data.MySqlClient
@inject NavigationManager NavigationManager
<h3>UserCreate</h3>
<div class="container">
	<EditForm Model="user" OnValidSubmit="HandleCreateUser">
		<div class="row">
			<DataAnnotationsValidator />
			<div class="col-6">
				<div class="mb-3">
					<label class="form-label">Full Name</label>
					<InputText class="form-control" @bind-Value=user.UserName />
					<ValidationMessage For="() => user.UserName" />
				</div>

				<div class="mb-3">
					<label class="form-label">Email</label>
					<InputText class="form-control" @bind-Value=user.UserEmail />
					<ValidationMessage For="() => user.UserEmail" />
				</div>
				<div class="mb-3">
					<label class="form-label">Phone Number </label>
					<InputText class="form-control" @bind-Value=user.UserPhoneNumber />
					<ValidationMessage For="() => user.UserPhoneNumber" />
				</div>
				<div class="mb-3">
					<label class="form-label">Password</label>
					<InputText class="form-control" @bind-Value=user.UserPassword />
					<ValidationMessage For="() => user.UserPassword" />
				</div>

				<div class="mb-3">
					<label class="form-label">Status</label>
					<InputSelect @bind-Value=user.IsDeleted class="form-control">
						<option value="0">Active</option>
						<option value="1">Deleted</option>
					</InputSelect>
					<ValidationMessage For="() => user.IsDeleted" />
				</div>
				<div class="mb-3">
					<Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save</Button>
				</div>
			</div>
			<div class="col-6">
				<div class="mb-3">
					<label class="form-label">File</label>
					<InputFile class="form-control" OnChange="HandleFileSeclected"></InputFile>
					@if (ImageDataUrl != "")
					{
						<img src="@ImageDataUrl" style="max-width: 500px;" />
					}

				</div>
			</div>
		</div>
	</EditForm>
</div>
@code {
    protected User user = new User();
    private string ImageDataUrl = "";
    private IBrowserFile selectedFile;
    private async void HandleCreateUser()
    {
        try 
        {
            await SaveImageToServer(selectedFile);
            string UserName = user.UserName;
            string UserEmail = user.UserEmail;
            string UserPassword = user.UserPassword;
            string UserPhoneNumber = user.UserPhoneNumber;
            int IsDeleted = user.IsDeleted;
            string UserAvatar = user.UserAvatar;
            string SqlInsertUser = $"INSERT INTO users(user_name, user_email, user_password, user_avatar,user_phone_number, isDeleted) VALUES('{UserName}','{UserEmail}','{UserPassword}','{UserAvatar}','{UserPhoneNumber}','{IsDeleted}')";
            MySqlConnection conn = DBMySQLUltils.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = SqlInsertUser;
            cmd.ExecuteNonQuery();
            conn.Close();
            NavigationManager.NavigateTo ("/user/list");
        } catch (Exception ex) 
        {
        }
    }
    private async Task HandleFileSeclected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
		var resizeFile = await e.File.RequestImageFileAsync("image/jpeg", 500, 500);
		var buffer = new byte[resizeFile.Size];
		await resizeFile.OpenReadStream().ReadAsync(buffer);
		ImageDataUrl = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
    }
    private async Task SaveImageToServer(IBrowserFile file)
	{
		var FileName = file.Name;
		var folderPath = Path.Combine("wwwroot", "uploads"); //wwwroot/uploads
		var filePath = Path.Combine(folderPath, FileName); //wwwroot/uploads/...
		Directory.CreateDirectory(folderPath);
		using(var fileStream = new FileStream(filePath, FileMode.Create))
		{
			await file.OpenReadStream(10000000).CopyToAsync(fileStream);
		}
		user.UserAvatar = $"uploads/{FileName}";
	}
}
